1. 下载decp unix版本, chomd +x decp
2. 安装open JDK 8 [参考](https://github.com/ztj2017/doc/blob/master/%E5%AE%89%E8%A3%85java1.8%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98)
3.安装awx-cli
   pip install awscli --upgrade --user
   验证 aws --version
   添加环境变量
   将~/.local/bin添加到/etc/environment文件path中
   配置 AWS CLI (生成~/.aws/目录)
    $ aws configure
        AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE
        AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
        Default region name [None]: us-east-1
        Default output format [None]: json
4. 安装docker-ce [参考](https://github.com/ztj2017/doc/blob/master/ubuntu.docker.MD)
5.安装jenkins
   1).添加官方软件仓库的秘钥到本地的apt秘钥中
      wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo apt-key add -
   2).将地址添加进本地的软件源列表
      sh -c 'echo deb http://pkg.jenkins-ci.org/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
   3).更新源并安装Jekins
      sudo apt-get update
      sudo apt-get install jenkins
   4).启动jenkins服务
      systemctl start jenkins (sudo /etc/init.d/jenkins [start|restart|stop])
      Jenkins启动后，默认的日志会输出到/var/log/jenkins/jenkins.log文件中，启动后默认会创建一个管理员账号admin，以及为此账号产生一个密码，
      密码会写入到文件/var/lib/jenkins/secrets/initialAdminPassword中，可通过vim或vi查看日志文件和密码文件
   5).访问Jenkins服务
      在浏览器地址栏输入http://IP:8080/ 就可以访问

6. 安装maven
   添加PATH 和CLASSPATH
   PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/local/mysql/bin:/opt/apache-maven-3.6.2/bin:~/.local/bin"
   JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
   CLASSPATH=.:/usr/lib/jvm/java-8-openjdk-amd64/lib:/opt/apache-maven-3.6.2/lib
 7. 配置jenkins
   以root运行jenkins /etc/default/jenkins修改为root用户，然后重启，否则maven docker插件报错，无权访问/var/run/docker.sock
      chown -R root:root /var/lib/jenkins
      chown -R root:root /var/cache/jenkins
      chown -R root:root /var/log/jenkins
   在系统配置--》全局工具配置中，指定 jdk git maven docker等命令的目录
   配置git 添加ssh key [参考](https://blog.csdn.net/xb12369/article/details/78682018)
   
   构建前脚本：
   #!/bin/bash

   dos2unix customerportal-core/src/main/commands/launch.sh
   echo "change spring.profiles.active to $enviroment"
   sed -i "s/active:.*/active: $enviroment/g" customerportal-core/src/main/resources/application.yml
   
   构建后脚本
   #!/bin/bash
   echo "image build success."
   docker tag msd-cp-customerpotal 219919340901.dkr.ecr.us-east-1.amazonaws.com/msd-cp-customerportal
   echo "login aws cer"
   $(aws ecr get-login --region us-east-1 --no-include-email | sed "s/595878661657.dkr.ecr.us-east-1.amazonaws.com/219919340901.dkr.ecr.us-east-1.amazonaws.com/g")
   echo "push image"
   digest=`docker push 219919340901.dkr.ecr.us-east-1.amazonaws.com/msd-cp-customerportal | grep "image: ecr:msd-cp-customerportal@sha256" | awk -F: '{print $4}'`
   echo "change descriptor.yaml"
   sed -i "s/msd-cp-customerportal@sha256:.*/msd-cp-customerportal@sha256:$digest/g" customerportal-core/src/main/resources/descriptor.yaml
   /opt/ztj/decp undeploy $paltform msd-cp-customerportal -p test
   /opt/ztj/decp deploy $paltform customerportal-core/src/main/resources/descriptor.yaml -p test

